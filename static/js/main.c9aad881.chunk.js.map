{"version":3,"sources":["enums/Requirement.ts","components/TodoList/TodoList.tsx","api/api.ts","components/Loader/Loader.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["Requirement","TodoList","state","titleQuery","todoRequirement","ALL","handleChange","event","target","name","value","setState","getVisibleTodos","todos","props","filter","todo","title","includes","ACTIVE","completed","COMPLETED","meetRequirement","this","selectedUserId","onSelect","visibleTodos","className","type","placeholder","onChange","id","map","classNames","htmlFor","checked","readOnly","userId","onClick","React","Component","wait","delay","Promise","resolve","setTimeout","request","url","a","fetch","response","ok","Error","status","json","getUserInfo","Loader","CurrentUser","currentUser","isLoading","loadCurrentUser","user","console","warn","prevProps","clearSelectedUser","email","phone","App","selectUser","newSelectedUserId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c9aad881.chunk.js","sourcesContent":["export enum Requirement {\n  ALL = 'all',\n  ACTIVE = 'not completed',\n  COMPLETED = 'completed',\n}\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Requirement } from '../../enums/Requirement';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[];\n  selectedUserId: User['id'];\n  onSelect: (newSelectedUserId: User['id']) => void;\n};\n\ntype State = {\n  titleQuery: string;\n  todoRequirement: Requirement;\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    titleQuery: '',\n    todoRequirement: Requirement.ALL,\n  };\n\n  handleChange = (\n    event: React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<HTMLSelectElement>,\n  ) => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value,\n    } as Pick<State, 'titleQuery'>);\n  };\n\n  getVisibleTodos = () => {\n    const { todos } = this.props;\n    const { titleQuery } = this.state;\n\n    const meetRequirement = (todo: Todo) => {\n      switch (this.state.todoRequirement) {\n        case Requirement.ACTIVE:\n          return !todo.completed;\n\n        case Requirement.COMPLETED:\n          return todo.completed;\n\n        default:\n          return true;\n      }\n    };\n\n    return todos.filter(\n      (todo) => todo.title.includes(titleQuery) && meetRequirement(todo),\n    );\n  };\n\n  render() {\n    const { todos, selectedUserId, onSelect } = this.props;\n    const { titleQuery, todoRequirement } = this.state;\n\n    const visibleTodos = this.getVisibleTodos();\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__list-container\">\n          <input\n            className=\"TodoList__search-query\"\n            type=\"text\"\n            name=\"titleQuery\"\n            value={titleQuery}\n            placeholder=\"Search for todo...\"\n            onChange={this.handleChange}\n          />\n\n          <select\n            name=\"todoRequirement\"\n            value={todoRequirement}\n            onChange={this.handleChange}\n            id=\"todoRequirement\"\n          >\n            <option value={Requirement.ALL}>All</option>\n            <option value={Requirement.ACTIVE}>Not completed</option>\n            <option value={Requirement.COMPLETED}>Completed</option>\n          </select>\n\n          {todos && (\n            <ul className=\"TodoList__list\">\n              {visibleTodos.map((todo) => (\n                <li\n                  key={todo.id}\n                  className={classNames(\n                    'TodoList__item',\n                    {\n                      'TodoList__item--checked': todo.completed,\n                    },\n                    { 'TodoList__item--unchecked': !todo.completed },\n                  )}\n                >\n                  <label htmlFor=\"todoStatus\">\n                    <input type=\"checkbox\" checked={todo.completed} readOnly />\n                    <p>{todo.title}</p>\n                  </label>\n\n                  <button\n                    className={classNames('TodoList__user-button button', {\n                      'TodoList__user-button--selected':\n                        todo.userId === selectedUserId,\n                    })}\n                    type=\"button\"\n                    onClick={() => onSelect(todo.userId)}\n                  >\n                    User&nbsp;#\n                    {todo.userId}\n                  </button>\n                </li>\n              ))}\n            </ul>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n","import { Todo } from '../types/Todo';\nimport { User } from '../types/User';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\nconst wait = (delay: number): Promise<typeof delay> => {\n  return new Promise((resolve) => {\n    setTimeout(() => resolve(delay), delay);\n  });\n};\n\nconst request = async <T>(url: string): Promise<T> => {\n  const response = await fetch(`${BASE_URL}${url}`);\n\n  if (!response.ok) {\n    throw new Error(`HTTP error! status: ${response.status}`);\n  }\n\n  return response.json();\n};\n\nexport const getTodos = () => request<Todo[]>('/todos');\n\nexport const getUserInfo = async (userId: User['id']) => {\n  await wait(1000);\n\n  return request<User>(`/users/${userId}`);\n};\n","import './Loader.css';\n\nexport const Loader = () => {\n  return <div className=\"loader\" />;\n};\n","import React from 'react';\nimport { getUserInfo } from '../../api/api';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: User['id'];\n  clearSelectedUser: () => void;\n};\n\ntype State = {\n  currentUser: User | null;\n  isLoading: boolean;\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    currentUser: null,\n    isLoading: false,\n  };\n\n  componentDidMount() {\n    this.loadCurrentUser();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadCurrentUser();\n    }\n  }\n\n  loadCurrentUser = async () => {\n    this.setState({\n      isLoading: true,\n    });\n\n    try {\n      const user: User = await getUserInfo(this.props.userId);\n\n      this.setState({\n        currentUser: user,\n      });\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        'An error has occurred when loading user info from the server',\n      );\n    } finally {\n      this.setState({\n        isLoading: false,\n      });\n    }\n  };\n\n  render() {\n    const { userId, clearSelectedUser } = this.props;\n    const { currentUser, isLoading } = this.state;\n\n    return (\n      <div className=\"CurrentUser\">\n        {isLoading && <Loader />}\n\n        {currentUser && (\n          <>\n            <h2 className=\"CurrentUser__title\">\n              <span>\n                {'Selected user: '}\n                {userId}\n              </span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">{currentUser.name}</h3>\n            <p className=\"CurrentUser__email\">{currentUser.email}</p>\n            <p className=\"CurrentUser__phone\">{currentUser.phone}</p>\n\n            <button\n              className=\"button\"\n              type=\"button\"\n              onClick={clearSelectedUser}\n            >\n              Clear\n            </button>\n          </>\n        )}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api/api';\nimport { User } from './types/User';\n\ntype State = {\n  todos: Todo[] | null;\n  selectedUserId: number;\n};\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    todos: null,\n    selectedUserId: 0,\n  };\n\n  async componentDidMount() {\n    try {\n      const todos: Todo[] = await getTodos();\n\n      this.setState({\n        todos,\n      });\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.warn('An error has occurred when loading todos from the server');\n    }\n  }\n\n  selectUser = (newSelectedUserId: User['id']) => {\n    this.setState({\n      selectedUserId: newSelectedUserId,\n    });\n  };\n\n  clearSelectedUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  };\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          {todos && (\n            <TodoList\n              todos={todos}\n              selectedUserId={selectedUserId}\n              onSelect={this.selectUser}\n            />\n          )}\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearSelectedUser={this.clearSelectedUser}\n              />\n            ) : (\n              'No user selected'\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}